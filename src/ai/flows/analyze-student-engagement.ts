// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Analyzes student engagement during video calls using facial expressions and other cues.
 *
 * - analyzeStudentEngagement - A function that handles the student engagement analysis process.
 * - AnalyzeStudentEngagementInput - The input type for the analyzeStudentEngagement function.
 * - AnalyzeStudentEngagementOutput - The return type for the analyzeStudentEngagement function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeStudentEngagementInputSchema = z.object({
  videoDataUri: z
    .string()
    .describe(
      "A video recording of the student's session, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  transcript: z.string().describe('The transcript of the video call session.'),
  studentId: z.string().describe('The unique identifier of the student.'),
});
export type AnalyzeStudentEngagementInput = z.infer<
  typeof AnalyzeStudentEngagementInputSchema
>;

const AnalyzeStudentEngagementOutputSchema = z.object({
  engagementLevel: z
    .number()
    .describe(
      'A numerical value representing the student engagement level, ranging from 0 (low engagement) to 100 (high engagement).'
    ),
  facialExpressionAnalysis: z
    .string()
    .describe('Analysis of the student’s facial expressions.'),
  movementAnalysis: z.string().describe('Analysis of the student’s movements.'),
  overallAnalysis: z
    .string()
    .describe('The overall analysis of student engagement.'),
  suggestedDifficultyAdjustment: z
    .string()
    .describe(
      'Suggested adjustment to the difficulty level of the AI problem solver.'
    ),
});
export type AnalyzeStudentEngagementOutput = z.infer<
  typeof AnalyzeStudentEngagementOutputSchema
>;

export async function analyzeStudentEngagement(
  input: AnalyzeStudentEngagementInput
): Promise<AnalyzeStudentEngagementOutput> {
  return analyzeStudentEngagementFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeStudentEngagementPrompt',
  input: {schema: AnalyzeStudentEngagementInputSchema},
  output: {schema: AnalyzeStudentEngagementOutputSchema},
  prompt: `You are an AI expert in analyzing student engagement during online learning sessions.

  You will analyze the student's engagement level based on their facial expressions, movements, and the session transcript.

  Based on your analysis, you will provide an overall analysis of the student's engagement and a suggested adjustment to the difficulty level of the AI problem solver.

  Video: {{media url=videoDataUri}}
  Transcript: {{{transcript}}}
  Student ID: {{{studentId}}}

  Consider these factors when determining engagement level:
  - Facial expressions (e.g., smiling, frowning, confusion)
  - Movements (e.g., fidgeting, nodding, looking away)
  - Participation in the session (based on the transcript)

  Output the engagementLevel as a number between 0 and 100. The other fields should be a short summary of your findings.`,
});

const analyzeStudentEngagementFlow = ai.defineFlow(
  {
    name: 'analyzeStudentEngagementFlow',
    inputSchema: AnalyzeStudentEngagementInputSchema,
    outputSchema: AnalyzeStudentEngagementOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
